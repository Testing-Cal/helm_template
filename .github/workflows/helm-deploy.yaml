name: Deploy-to-helm-Dev

on: 
  workflow_dispatch:
  workflow_run:
    workflows: 'CI-Dev'
    types:
      - completed

jobs:
  continuous-deployment:
    runs-on: ${{ vars.RUNNER_NAME_DEV}}
    environment:
      name: "Dev"
    env:
      KUBECTL_IMAGE_VERSION: "bitnami/kubectl:1.28" #https://hub.docker.com/r/bitnami/kubectl/tags
      HELM_IMAGE_VERSION: "alpine/helm:3.8.1" #https://hub.docker.com/r/alpine/helm/tags
      OC_IMAGE_VERSION: "quay.io/openshift/origin-cli:4.9.0" #https://quay.io/repository/openshift/origin-cli?tab=tags


    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
          
      - name: Initialization
        run: |
          sudo apt install yq -y 
          JSON_STRING='${{ vars.BUILD_METADATA }}'

          # push to collector
          echo "TENANT_ID=$(echo "$JSON_STRING" | jq -r '.general.tenant')" >> "$GITHUB_ENV"
          echo "TARGET_URI=$(echo "$JSON_STRING" | jq -r '.general.lazsaDomainUri')" >> "$GITHUB_ENV"
          echo "AGENT_ID=$(echo "$JSON_STRING" | jq -r '.general.agentId')" >> "$GITHUB_ENV"
          echo "AGENT_API_KEY=$(echo "$JSON_STRING" | jq -r '.general.agentApiKey')" >> "$GITHUB_ENV"
          echo "DEVOPS_SETTING_ID=$(echo "$JSON_STRING" | jq -r '.general.devopsSettingId')" >> "$GITHUB_ENV"
         
          echo "REGISTRY_URL=$(echo "$JSON_STRING" | jq -r '.general.containerImagePath')" >> "$GITHUB_ENV"
          echo "BUILD_TAG=$(echo "$JSON_STRING" | jq -r '.general.containerImageTag')"  >> "$GITHUB_ENV"
          echo "ARTIFACTORY=$(echo "$JSON_STRING" | jq -r '.general.artifactory')"  >> "$GITHUB_ENV"
          echo "RELEASE_NAME=$(echo "$JSON_STRING" | jq -r '.general.name')"  >> "$GITHUB_ENV"
          echo "CONTEXT=$(echo "$JSON_STRING" | jq -r '.general.contextPath')" >> "$GITHUB_ENV"
          echo "ACTION=$(echo "$JSON_STRING" | jq -r '.general.action')" >> "$GITHUB_ENV"
          echo "ARTIFACTORY_USER_SECRET=$(echo "$JSON_STRING" | jq -r '.general.ArtifactoryUserSecret')" >> "$GITHUB_ENV"
          echo "ARTIFACTORY_PASSWORD_SECRET=$(echo "$JSON_STRING" | jq -r '.general.ArtifactoryPasswordSecret')" >> "$GITHUB_ENV"
          echo "KUBERNETES_SECRET=$(echo "$JSON_STRING" | jq -r '.general.kubernetesSecret')" >> "$GITHUB_ENV"
          echo "ARTIFACTORY_URL=$(echo "$JSON_STRING" | jq -r '.general.artifactoryURL')" >> "$GITHUB_ENV"
          echo "DEPLOYMENT_TYPE=$(echo "$JSON_STRING" | jq -r '.general.deploymentType')" >> "$GITHUB_ENV"

          # Helm variables
          echo "KUBERNETES_NAMESPACE=$(echo "$JSON_STRING" | jq -r '.helm.namespace')" >> "$GITHUB_ENV"
          echo "HELM_ARGUMENTS=$(echo "$JSON_STRING" | jq -r '.helm.additionalArguments')" >> "$GITHUB_ENV"
          echo "HELM_VALUES=$(echo "$JSON_STRING" | jq -r '.helm.additionalFiles')" >> "$GITHUB_ENV"
          echo "HELM_CHART_LOCATION=$(echo "$JSON_STRING" | jq -r '.helm.workingDirectory')" >> "$GITHUB_ENV"
          echo "HELM_CHART_TYPE=$(echo "$JSON_STRING" | jq -r '.helm.type')" >> "$GITHUB_ENV"
          echo "HELM_CHART_VERSION=$(echo "$JSON_STRING" | jq -r '.helm.version')" >> "$GITHUB_ENV"
          echo "HELM_REPO_AUTHENTICATION=$(echo "$JSON_STRING" | jq -r '.helm.repoAuthentication')" >> "$GITHUB_ENV"
          echo "HELM_ROLLBACK_VERSION=$(echo "$JSON_STRING" | jq -r '.helm.rollbackVersion')" >> "$GITHUB_ENV"
          echo "HOST_NAME=$(echo "$JSON_STRING" | jq -r '.kubernetes.oc.route.host')" >> "$GITHUB_ENV"

          # For helm Repo Authentication
          echo "HELM_REPO_URL=$(echo "$JSON_STRING" | jq -r '.helm.repoURL')" >> "$GITHUB_ENV"
          echo "HELM_REPO_USERNAME=$(echo "$JSON_STRING" | jq -r '.helm.repoUsername')" >> "$GITHUB_ENV"
          echo "HELM_REPO_PASSWORD=$(echo "$JSON_STRING" | jq -r '.helm.repoPassword')" >> "$GITHUB_ENV"

          # validating release name
          export "RELEASE_NAME_HELM=$(echo "$JSON_STRING" | jq -r '.general.name')"
          set +x
          if [[ $RELEASE_NAME_HELM =~ ^[A-Za-z0-9-]+$ ]]; then
              echo "Helm release name is valid"
          else
              echo "Helm release name is not valid"
              exit 1;
          fi
          set -x

      - name: Configure Kubeconfig File
        env:
          KUBE_CONFIG: ${{ secrets[env.KUBERNETES_SECRET] }}
        run: |
          mkdir -p $HOME/.kube
          echo "${{ env.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config

      - name: Helm install
        if: env.ACTION == 'DEPLOY'
        run: |
          # Creating namespace 
          docker run --rm  --user root -v "$HOME/.kube/config":"/.kube/config" -e KUBECONFIG="/.kube/config" $KUBECTL_IMAGE_VERSION create ns "$KUBERNETES_NAMESPACE" || true

          # if deployment type is 'OPENSHIFT'
          if [[ $DEPLOYMENT_TYPE == 'OPENSHIFT' ]];then
              COUNT=$(grep 'serviceAccount' Helm.yaml | wc -l)
              if [[ $COUNT -gt 0 ]]
              then
                  ACCOUNT=$(grep 'serviceAccount:' Helm.yaml | tail -n1 | awk '{ print $2}')
                  echo $ACCOUNT
              else
                  ACCOUNT='default'
              fi
              docker run --rm  --user root -v "$HOME/.kube/config":"/.kube/config" -e KUBECONFIG="/.kube/config" -v "$GITHUB_WORKSPACE":/apps -w /apps $OC_IMAGE_VERSION oc adm policy add-scc-to-user anyuid -z $ACCOUNT -n "$KUBERNETES_NAMESPACE"
           fi
           
            
           if [[ $ARTIFACTORY != "ECR" ]];then
             ## hardcoded name regcred need to be change
             docker run --rm  --user root -v "$HOME/.kube/config":"/.kube/config" -e KUBECONFIG="/.kube/config" $KUBECTL_IMAGE_VERSION -n "$KUBE_NAMESPACE" delete secret regcred --ignore-not-found || true
             docker run --rm  --user root -v "$HOME/.kube/config":"/.kube/config" -e KUBECONFIG="/.kube/config" $KUBECTL_IMAGE_VERSION -n "$KUBE_NAMESPACE" create secret docker-registry regcred --docker-server="$REGISTRY_URL" --docker-username=${{ secrets[env.ARTIFACTORY_USER_SECRET] }} --docker-password=${{ secrets[env.ARTIFACTORY_PASSWORD_SECRET] }} || true
           fi

           # if chart type is lazsa
           if [[ $HELM_CHART_TYPE == 'lazsa' ]];then
                echo "Actual helm installation for lazsa"
                cat Helm.yaml 
                if [[ $DEPLOYMENT_TYPE == 'OPENSHIFT' && $CONTEXT_PATH != '' ]];then 
                    docker run --rm  --user root -v "$HOME/.kube/config":"/.kube/config" -e KUBECONFIG="/.kube/config" -v "$GITHUB_WORKSPACE":/apps -w /apps $HELM_IMAGE_VERSION template "$RELEASE_NAME" ./$HELM_CHART_LOCATION -n "$KUBERNETES_NAMESPACE" --values ./helm_chart/values.yaml --set ingress.enabled=false --set oc.route.enabled="true" --set oc.route.host=$HOST_NAME --set context=$CONTEXT_PATH $HELM_VALUES -f Helm.yaml
                    docker run --rm  --user root -v "$HOME/.kube/config":"/.kube/config" -e KUBECONFIG="/.kube/config" -v "$GITHUB_WORKSPACE":/apps -w /apps $HELM_IMAGE_VERSION upgrade --install $HELM_ARGUMENTS "$RELEASE_NAME" ./$HELM_CHART_LOCATION -n "$KUBERNETES_NAMESPACE" --values ./helm_chart/values.yaml --set ingress.enabled="false" --set oc.route.enabled="true" --set oc.route.host=$HOST_NAME --set context=$CONTEXT_PATH $HELM_VALUES -f Helm.yaml
                elif [[ $DEPLOYMENT_TYPE == 'OPENSHIFT' && $CONTEXT_PATH == '' ]];then
                    # Openshift Deployment without Context Path 
                    docker run --rm  --user root -v "$HOME/.kube/config":"/.kube/config" -e KUBECONFIG="/.kube/config" -v "$GITHUB_WORKSPACE":/apps -w /apps $HELM_IMAGE_VERSION template "$RELEASE_NAME" ./$HELM_CHART_LOCATION -n "$KUBERNETES_NAMESPACE" --values ./helm_chart/values.yaml --set ingress.enabled=false --set oc.route.enabled="true" --set oc.route.host=$HOST_NAME $HELM_VALUES -f Helm.yaml
                    docker run --rm  --user root -v "$HOME/.kube/config":"/.kube/config" -e KUBECONFIG="/.kube/config" -v "$GITHUB_WORKSPACE":/apps -w /apps $HELM_IMAGE_VERSION upgrade --install $HELM_ARGUMENTS "$RELEASE_NAME" ./$HELM_CHART_LOCATION -n "$KUBERNETES_NAMESPACE" --values ./helm_chart/values.yaml --set ingress.enabled="false" --set oc.route.enabled="true" --set oc.route.host=$HOST_NAME $HELM_VALUES -f Helm.yaml
                elif [[ $CONTEXT_PATH == '' ]];then 
                    # K8s Deployment without context path
                    docker run --rm  --user root -v "$HOME/.kube/config":"/.kube/config" -e KUBECONFIG="/.kube/config" -v "$GITHUB_WORKSPACE":/apps -w /apps $HELM_IMAGE_VERSION upgrade --install $HELM_ARGUMENTS "$RELEASE_NAME" ./$HELM_CHART_LOCATION -n "$KUBERNETES_NAMESPACE" --values ./helm_chart/values.yaml $HELM_VALUES -f Helm.yaml
                else
                    # k8s deployment with context Path
                    docker run --rm  --user root -v "$HOME/.kube/config":"/.kube/config" -e KUBECONFIG="/.kube/config" -v "$GITHUB_WORKSPACE":/apps -w /apps $HELM_IMAGE_VERSION upgrade --install $HELM_ARGUMENTS "$RELEASE_NAME" ./$HELM_CHART_LOCATION -n "$KUBERNETES_NAMESPACE" --values ./helm_chart/values.yaml --set ingress.enabled="true" --set ingress.hosts[0].paths[0].path=$CONTEXT_PATH $HELM_VALUES -f Helm.yaml
                fi
           fi

      - name: Helm Uninstall
        if: env.ACTION == 'DESTROY'
        run: |
          # Uninstall 
          set +x
          export RELEASE_STATUS=$(docker run --rm  --user root -v "$HOME/.kube/config":"/.kube/config" -e KUBECONFIG="/.kube/config" -v "$GITHUB_WORKSPACE":/apps -w /apps $HELM_IMAGE_VERSION status $RELEASE_NAME -n "$KUBERNETES_NAMESPACE")
          echo $RELEASE_STATUS
          if [[ "$RELEASE_STATUS" != "Error: release: not found" ]];then
              echo "Release Present"
              docker run --rm  --user root -v "$HOME/.kube/config":"/.kube/config" -e KUBECONFIG="/.kube/config" -v "$GITHUB_WORKSPACE":/apps -w /apps $HELM_IMAGE_VERSION uninstall $RELEASE_NAME -n "$KUBERNETES_NAMESPACE"
          else
              echo "Release not found"
          fi
          set -x

      - name: Helm Rollback
        if: env.ACTION == 'ROLLBACK'
        run: | 
          export RELEASE_STATUS=$(docker run --rm  --user root -v "$HOME/.kube/config":"/.kube/config" -e KUBECONFIG="/.kube/config" -v "$GITHUB_WORKSPACE":/apps -w /apps $HELM_IMAGE_VERSION status $RELEASE_NAME -n "$KUBERNETES_NAMESPACE")
          echo $RELEASE_STATUS
          if [[ "$RELEASE_STATUS" != "Error: release: not found" ]];then
                echo "Release Present, going for Rollback"
                docker run --rm  --user root -v "$HOME/.kube/config":"/.kube/config" -e KUBECONFIG="/.kube/config" -v "$GITHUB_WORKSPACE":/apps -w /apps $HELM_IMAGE_VERSION rollback $RELEASE_NAME $HELM_ROLLBACK_VERSION
                docker run --rm  --user root -v "$HOME/.kube/config":"/.kube/config" -e KUBECONFIG="/.kube/config" -v "$GITHUB_WORKSPACE":/apps -w /apps $HELM_IMAGE_VERSION history $RELEASE_NAME
            else
                echo "Release not found"
            fi
